/* Java implementation to convert  
 infix expression to postfix*/
// Note that here we use Stack class for Stack operations 
  
import java.util.Stack; 
  
class Main 
{ 
    // A utility function to return  
    // precedence of a given operator 
    // Higher returned value means  
    // higher precedence 
    static int Prec(char ch) {
        
        if (ch == '+' || ch == '-')
         return 1;
        else if (ch == '*' || ch == '/')
         return 2;
        else if (ch == '^')
         return 3;
        else 
         return -1;
    } 
       
    // The main method that converts  
    // given infix expression 
    // to postfix expression.  
    static String infixToPostfix(String exp) 
    { 
        // initializing empty String for result 
        String result = ""; 
          
        // initializing empty stack 
        Stack<Character> stack = new Stack<>(); 
          
        for (int i = 0; i<exp.length(); ++i) 
        { 
            char ch = exp.charAt(i); 
              
            // If the scanned character is an 
            // operand, add it to output. 
            if (Character.isLetterOrDigit(ch)) 
                result += ch; 
               
            // If the scanned character is an '(',  
            // push it to the stack. 
            else if (ch == '(') 
                stack.push(ch); 
              
            //  If the scanned character is an ')',  
            // pop and output from the stack  
            // until an '(' is encountered. 
            else if (ch == ')') 
            { 
                while (!stack.isEmpty() &&  
                        stack.peek() != '(') 
                    result += stack.pop(); 
                  
                    stack.pop(); 
            } 
            else // an operator is encountered 
            { 
                while (!stack.isEmpty() && Prec(ch)  
                         <= Prec(stack.peek())){ 
                    
                    result += stack.pop(); 
             } 
                stack.push(ch); 
            } 
       
        } 
       
        // pop all the operators from the stack 
        while (!stack.isEmpty()){ 
            if(stack.peek() == '(') 
                return "Invalid Expression"; 
            result += stack.pop(); 
         } 
        return result; 
    } 
    
    // Driver method  
    public static void main(String[] args)  
    { 
        String exp = "a+b*(c^d)"; 
        System.out.println(infixToPostfix(exp)); 
    } 
}